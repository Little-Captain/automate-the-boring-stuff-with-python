#!/usr/bin/env python

# 利用内建的 subprocess 模块中的 Popen() 函数，Python 程序可以启动计算机中的其他程序
# 如果你打开了一个应用程序的多个实例，每个实例都是同一个程序的不同进程

# 每个进程可以有多个线程。不像线程，进程无法直接读写另一个进程的变量
# 如果你认为多线程程序是多个手指在追踪源代码，那么同一个程序打开多个进程
# 就像有一个朋友拿着程序源代码的独立副本。你们都独立地执行相同的程序

# 如果想在 Python 脚本中启动一个外部程序，就将该程序的文件名传递给 subprocess.Popen()
# 请记住，启动的程序和你的 Python 程序不在同一线程中运行

import subprocess
import time

'''
calcProc = subprocess.Popen('C:\\Windows\\System32\\calc.exe')
print(calcProc)
'''

# 返回值是一个 Popen 对象，它有两个有用的方法：poll() 和 wait()

# 可以认为 poll() 方法是问你的朋友，她是否执行完毕你给她的代码
# 如果这个进程在 poll() 调用时仍在运行，poll() 方法就返回 None
# 如果该程序已经终止，它会返回该进程的整数退出代码
# 退出代码用于说明进程是无错终止（退出代码为0）
# 还是一个错误导致进程终止（退出代码非零，通常为1，但可能根据程序而不同）

# wait() 方法就像是等着你的朋友执行完她的代码，然后你继续执行你的代码
# wait() 方法将阻塞，直到启动的进程终止。如果你希望你的程序暂停，直到
# 用户完成与其他程序，这非常有用。wait()的返回值是进程的整数退出代码

'''
for i in range(10):
    # poll 的实验结果和上述不符合
    print("{} {}".format(i, calcProc.poll()))
    time.sleep(1)

# wait 的实验结果和上述不符合
calcProc.wait()

print('Done.')
'''

# 向 Popen() 传递命令行参数
# 用 Popen() 创建进程时，可以向进程传递命令行参数
# 要做到这一点，向 Popen() 传递一个列表，作为唯一的参数
# 该列表中的第一个字符串是要启动的程序的可执行文件名
# 所有后续的字符串将是该程序启动时，传递给该程序的命令行参数
# 实际上，这个列表将作为被启动程序的 sys.argv 的值

# 大多数具有图形用户界面（GUI）的应用程序，不像基于命令行或基于终端的
# 程序那样尽可能地使用命令行参数
# 但大多数 GUI 应用程序将接受一个参数，表示应用程序启动时立即打开的文件
'''
subprocess.Popen(['C:\\Windows\\notepad.exe', 'C:\\hello.txt'])
'''

# Task Scheduler、launchd 和 cron
# 如果你精通计算机，可能知道 Windows 上的 Task Scheduler，OS X 上的 launchd
# 或 Linux 上的 cron 调度程序。这些工具文档齐全，而且可靠，它们都允许你安排应用
# 程序在特定的时间启动

# 利用操作系统内置的调度程序，你不必自己写时钟检查代码来安排你的程序
# 但是，如果只需要程序稍作停顿，就用 time.sleep() 函数
# 或者不使用操作系统的调度程序，代码可以循环直到特定的日期和时间，每次循环时调用 time.sleep(1)

# 用 Python 打开网站
# webbrowser.open() 函数可以从程序启动 Web 浏览器，打开指定的网站
# 而不是用 subprocess.Popen() 打开浏览器应用程序

# 运行其他 Python 脚本
# 可以在 Python 中启动另一个 Python 脚本，就像任何其他的应用程序一样
# 只需向 Popen() 传入 python.exe 可执行文件，并将想运行的 .py 脚本的文件名作为它的参数
'''
subprocess.Popen(['C:\\python34\\python.exe', 'hello.py'])
'''
# 如果要启动的脚本需要命令行参数，就将它们添加列表中，放在脚本文件名后面
# 不同于将 Python 程序导入为一个模块，如果 Python 程序启动了另一个 Python 程序
# 两者将在独立的进程中运行，不能分享彼此的变量

# 用默认的应用程序打开文件
# 双击计算机上的 .txt 文件，会自动启动与 .txt 文件扩展名关联的应用程序
# 计算机上已经设置了一些这样的文件扩展名关联。利用 Popen()，Python 也可以用这种方式打开文件

# 每个操作系统都有一个程序，其行为等价于双击文档文件来打开它
# Windows      : start
# OS X         : open
# Ubuntu Linux : see
'''
subprocess.Popen(['start', 'hello.txt'], shell=True)
'''

# Unix 哲学
# 程序精心设计，能被其他程序启动，这样的程序比单独使用它们自己的代码更强大
# Unix 的哲学是一组由 UNIX 操作系统的程序员建立的软件设计原则
# 它认为：编写小的、目的有限的、能互操作的程序，胜过大的、功能丰富的应用程序
# 如果程序需要的所有信息都可以事先提供，最好是用命令行参数传入这些信息，而不是
# 等待用户键入它。这样，命令行参数可以由人类用户键入，也可以由另一个程序提供
# 这种互操作的方式，让你的程序可以作为另一个程序的部分而复用
# 唯一的例外是，你不希望口令作为命令行参数传入，因为命令行可能记录它们，作为命令历史
# 功能的一部分。在需要输入口令时，程序应该调用 input() 函数